
paquetes a instalar 

npm i react react-dom
npm i webpack webpack-cli webpack-dev-server --save-dev
npm i html-webpack-plugin html-loader --save-dev
npm i babel-loader @babel/preset-env @babel/preset-react @babel/core --save-dev
npm i css-loader mini-css-extract-plugin --save-dev

Flujo de desarrollo seguro y consistente con ESLint
(ya lo instale)
$ sudo npm install -g eslint
$ npm install eslint babel-eslint eslint-config-airbnb eslint-plugin-import eslint-plugin-jsx-a11y eslint-plugin-react --save-dev
$ npm i prettier eslint-plugin-prettier eslint-config-prettier --save-dev

// Se puede agregar este plugin a vscode 
https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint

Boton de paypal 
https://platzi.com/clases/2118-react-hooks/33506-paso-a-paso-para-conectar-tu-aplicacion-con-la-api/
npm i react-paypal-button


Git Hooks con Husky
$ npm install husky --save-dev

Agregar Husky a nuestro proyecto:
Para integrar Husky a nuestro proyecto y garantizar que cada commit cumple con el estándar deseado debemos de agregar la integración dentro de nuestro archivo package.json.
"husky": {
    "hooks": {
      "pre-commit": "npm test", 
      "pre-push": "npm test",
      "...": "..."
    }
  }

Una vez agregada la configuración podemos estar seguros de que antes de agregar cada commit se ejecutarán estos hooks, los cuales validarán las pruebas necesarias que agreguemos a nuestro proyecto tenga un resultado positivo.

Si existe un error o las pruebas que incorporamos el proyecto no funcionan, en la consola podremos ver el resultado mostrando el error por el cual no se puede enviar el commit a nuestro repositorio.



=======================
Closure fuction 

Lo que hizo Oscar es declarar en Product.jsx una función que llama a otra función 
y pasarla como parametro a Product

Es un closure y la clave esta en entender qué retorna cuando se ejecuta cada uno de los casos.
La ejecución del closure retorna otra función o callback que esta listo para ser ejecutado. 
En el caso del ejemplo cuando se ejecuta el método render del componente se ejecuta el 
closure y retorna otra función y es en el onClick que se ejecuta la función previamente 
retornada. El closure retorna la función más no la ejecuta.
Por otro lado, la ejecución del la función tradicional no retorna nada porque ya se 
ejecuta de una vez addToCart.

const handleAddToCart = (product) => () => {
	//
}

<button type="button" onClick={handleAddToCart(product)}>
  Comprar
</button>

const handleAddToCart = (product) => {
	//
}
<button type="button" onClick={() => handleAddToCart(product)}>
  Comprar
</button>



Webhooks 
https://www.campusmvp.es/recursos/post/que-son-los-webhooks-en-que-se-diferencian-de-una-api-rest-y-por-que-deberias-conocerlos.aspx

Los webhooks son basicamente llamar la API del cliente cuando se encuentre
satisfactorio el evento que el le interesa, el ejemplo clasico es que 
se hace una compra hacia paypal, y tengo que esperar que me notifique que la compra 
fue un exito para no tener que estar preguntandole a cada rato si se completo
el disparara un endpoint POST con la data al yo recibir ese endpoint, proceso la 
data y aviso al usuario que su compra fue procesada correctamente. 


Google Cloud Platform
Project: react-platzi-config-merch
key: AIzaSyDi2ZhGQr6gagk72u-TR2mWPHPkfZC8CT0
key=API_KEY
https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&callback=initMap


https://www.npmjs.com/package/@react-google-maps/api
npm i @react-google-maps/api

GIT ACTIONS with firebase
https://github.com/marketplace/actions/github-action-for-firebase


SEO 
npm i react-helmet
para añadir metadata

Analisis de performance con Lighthouse
analiza el performance de tu web app
ir a la consola y buscar la pestaña de Lighthouse y generar reporte ya sea 
para destok o mobil